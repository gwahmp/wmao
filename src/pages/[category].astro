---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection, render } from "astro:content"; // ðŸ‘ˆ import render
import Sidebar from "../components/Sidebar.astro";
import type { CollectionEntry } from "astro:content";

type Post = CollectionEntry<"posts">;
type Category = CollectionEntry<"category">;

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  const categories: Category[] = await getCollection("category");

  return categories.map((cat) => ({
    params: { category: cat.slug },
    props: { category: cat, posts },
  }));
}

const { category, posts } = Astro.props as {
  category: Category;
  posts: Post[];
};

const categoryPosts = posts.filter(
  (p) => p.data.category?.toLowerCase() === category.slug.toLowerCase()
);

// ðŸ‘‡ use render() helper
const { Content } = await render(category);
---




<BaseLayout 
  title={category.data.title} 
  description={category.data.description}
  image={`/assets/images/blog/${category.data.image}`}
>
<Fragment slot="head">
  <script
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "CollectionPage",
      "name": category.data.title,
      "description": category.data.description,
      "url": `https://www.wikimint.com/${category.slug}`,
      "mainEntity": categoryPosts
        .sort((a, b) => new Date(b.data.date) - new Date(a.data.date)) // sort by date desc
        .slice(0, 6) // take latest 6
        .map((post) => ({
          "@type": "Article",
          "headline": post.data.title,
          "url": `https://www.wikimint.com/${post.slug}`,
          "datePublished": post.data.date,
          "description": post.data.description,
          "image": `https://www.wikimint.com/assets/images/blog/${post.data.image}`
        }))
    }, null, 2)}
  />

  <script
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Home",
          "item": "https://www.wikimint.com/"
        },
        {
          "@type": "ListItem",
          "position": 2,
          "name": category.data.title,
          "item": `https://www.wikimint.com/${category.slug}`
        }
      ]
    }, null, 2)}
  />

  <script
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "ItemList",
      "name": `Posts in ${category.data.title}`,
      "itemListElement": categoryPosts
        .sort((a, b) => new Date(b.data.date) - new Date(a.data.date)) // sort by date desc
        .slice(0, 6) // latest 6
        .map((post, index) => ({
          "@type": "ListItem",
          "position": index + 1,
          "url": `https://www.wikimint.com/${post.slug}`,
          "name": post.data.title
        }))
    }, null, 2)}
  />
  <script
  type="application/ld+json"
  set:html={JSON.stringify({
    "@type": "Person",
            "@id": "https://sk.wikimint.com#author",
            "name": "Selvakumaran Krishnan",
            "url": "https://sk.wikimint.com",
            "image": "https://www.wikimint.com/assets/images/authors/selvakumaran-krishnan.webp",
            "sameAs": [
              "https://linkedin.com/in/selvakumaran-krishnan",
              "https://facebook.com/selvakumarank",
              "https://twitter.com/selvakumarankri",
              "https://profiles.wordpress.org/selvaklnc/"
            ],
            "jobTitle": "Full Stack Developer, Blogger, Creative Writer, Founder of Wikimint",
            "alumniOf": [{ "@type": "EducationalOrganization", "name": "Annamalai University", "sameAs": "https://annamalaiuniversity.ac.in/index.php" }],
            "knowsAbout": [
              { "@type": "Thing", "name": "Web Development" },
              { "@type": "Thing", "name": "Digital Marketing" },
              { "@type": "Thing", "name": "SEO" },
              { "@type": "Thing", "name": "Blogging" },
              { "@type": "Thing", "name": "Content Marketing" },
              { "@type": "Thing", "name": "Personal Finance" },
              { "@type": "Thing", "name": "Business Strategy" },
              { "@type": "Thing", "name": "Entrepreneurship" },
              { "@type": "Thing", "name": "Investing" },
              { "@type": "Thing", "name": "Stock Market" },
              { "@type": "Thing", "name": "Cryptocurrency" },
              { "@type": "Thing", "name": "Online Business" },
              { "@type": "Thing", "name": "E-commerce" },
              { "@type": "Thing", "name": "Affiliate Marketing" },
              { "@type": "Thing", "name": "Passive Income" },
              { "@type": "Thing", "name": "Financial Literacy" }
            ]

  }, null, 2)}
/>

</Fragment>

  <div class="grid grid-cols-1 md:grid-cols-12 gap-6 md:gap-10 max-w-7xl mx-auto">
    <main class="col-span-12 md:col-span-7 prose lg:prose-xl max-w-none">
      
      <!-- Category Metadata -->
      <h1 class="text-3xl font-bold mb-2">{category.data.h1}</h1>
      <p class="bluebox">{category.data.description}</p>

      <!-- Posts list -->
      <h2 class="text-2xl font-semibold mt-10 mb-4">
        Posts in {category.data.title}
      </h2>
      <ul class="space-y-6">
        {categoryPosts.map((post: Post) => (
          <li class="border-b pb-4">
            <a href={`/${post.slug}`} class="text-lg font-semibold hover:underline">
              {post.data.title}
            </a>
            {post.data.description && (
              <p class="text-gray-600 mt-1">{post.data.description}</p>
            )}
            {post.data.date && (
              <p class="text-sm text-gray-500">
                {new Date(post.data.date).toDateString()}
              </p>
            )}
          </li>
        ))}
        
      </ul>

      <!-- Render markdown content from category file -->
      <Content />
    </main>

    <aside class="col-span-12 md:col-span-5">
      <Sidebar />
    </aside>
  </div>
</BaseLayout>
